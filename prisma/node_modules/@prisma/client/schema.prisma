// File: prisma/schema.prisma

// Datasource & Generator
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

/**
 * ================================
 * Models for User Authentication & Roles
 * ================================
 */

model User {
  id                      Int        @id @default(autoincrement())
  email                   String     @unique @db.VarChar(255)
  password                String     @db.Text
  firstName               String     @db.VarChar(100)
  lastName                String     @db.VarChar(100)
  phone                   String?    @db.VarChar(20)
  streetAddress           String?    @db.VarChar(255)
  aptSuite                String?    @db.VarChar(100)
  city                    String?    @db.VarChar(100)
  state                   String?    @db.VarChar(50)
  zip                     String?    @db.VarChar(20)
  country                 String?    @db.VarChar(50)
  resetToken              String?    @db.VarChar(255)
  resetTokenExpiry        DateTime?
  isVerified              Boolean    @default(false)
  verificationToken       String?    @db.VarChar(255)
  verificationTokenExpiry DateTime?
  roles                   UserRole[]
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

enum RoleName {
  SUPERADMIN
  ADMIN
  STAFF
  DRIVER
  CUSTOMER
}

/**
 * ================================
 * Models for the Dynamic Menu System
 * ================================
 */

/**
 * Represents main sections or subcategories (e.g., "Breakfast", "Desserts").
 */
model MenuCategory {
  id        String     @id @default(cuid())
  name      String
  type      String // e.g., "MainMenu" or "GolfMenu"
  order     Int        @default(0)
  menuItems MenuItem[]
}

/**
 * Represents a single menu item available for order.
 */
model MenuItem {
  id             String   @id @default(cuid())
  title          String
  description    String?
  price          Float
  image          String?
  hasSpiceLevel  Boolean  @default(false)
  showInGolfMenu Boolean  @default(false)
  createdAt      DateTime @default(now())

  // Relationship to its category
  category   MenuCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  // Option groups for further customization
  optionGroups MenuItemOptionGroup[]

  // NEW: Clover integration fields
  cloverItemId String? // Optional field to store the Clover item ID
  stock        Int     @default(0) // Inventory, auto-populated from Clover
}

/**
 * Captures an option group for a menu item (e.g., "Choose Protein").
 */
model MenuItemOptionGroup {
  id          String @id @default(cuid())
  title       String
  minRequired Int
  maxAllowed  Int?
  optionType  String // e.g., "single-select", "multi-select", "dropdown"

  // Relationship to the parent MenuItem
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String

  // Choices within this option group
  choices MenuOptionChoice[]
}

/**
 * Represents a single choice within an option group (e.g., "Beef", "Chicken").
 */
model MenuOptionChoice {
  id              String @id @default(cuid())
  label           String // e.g., "Beef", "Chicken"
  priceAdjustment Float?

  // Relationship to the parent MenuItemOptionGroup
  optionGroup   MenuItemOptionGroup @relation(fields: [optionGroupId], references: [id])
  optionGroupId String

  // Optionally, a nested option group for further customization
  nestedOptionGroup NestedOptionGroup?
}

/**
 * Represents a nested option group (e.g., if "Fries" is selected, choose a sauce).
 */
model NestedOptionGroup {
  id          String @id @default(cuid())
  title       String
  minRequired Int
  maxAllowed  Int?

  // Relationship to the parent MenuOptionChoice
  parentChoice   MenuOptionChoice @relation(fields: [parentChoiceId], references: [id])
  parentChoiceId String           @unique

  // Nested choices within this group
  choices NestedOptionChoice[]
}

/**
 * Represents a single nested choice within a nested option group.
 */
model NestedOptionChoice {
  id              String @id @default(cuid())
  label           String
  priceAdjustment Float?

  // Relationship to the parent NestedOptionGroup
  nestedGroup   NestedOptionGroup @relation(fields: [nestedGroupId], references: [id])
  nestedGroupId String

  // NEW: (Optional) Clover integration for nested choices, if needed.
  cloverItemId String? // Optional Clover item ID
  stock        Int     @default(0) // Inventory tracking for this nested choice
}

/**
 * ================================
 * Other Schemas
 * ================================
 */

// Events Schema
model Event {
  id               String    @id @default(cuid())
  title            String
  description      String
  location         String
  date             DateTime
  time             String
  adultPrice       Float
  kidPrice         Float
  availableTickets Int
  image            String?
  isFree           Boolean
  adultOnly        Boolean
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  rsvps            RSVP[]
  bookings         Booking[]
}

model RSVP {
  id         String   @id @default(cuid())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  name       String
  email      String
  adultCount Int
  kidCount   Int
  createdAt  DateTime @default(now())
}

model Booking {
  id         String   @id @default(cuid())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  name       String
  email      String
  adultCount Int
  kidCount   Int
  totalPrice Float
  createdAt  DateTime @default(now())
}

// Careers Schema
model Career {
  id           String        @id @default(cuid())
  title        String
  description  String
  requirements String?
  deadline     DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
}

model Application {
  id            String   @id @default(cuid())
  applicantName String
  email         String   @default("")
  jobTitle      String
  resumeUrl     String
  career        Career?  @relation(fields: [careerId], references: [id])
  careerId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Gallery Schema
model GalleryImage {
  id          Int      @id @default(autoincrement())
  src         String
  alt         String
  title       String
  description String
  createdAt   DateTime @default(now())
}

// Opening Hours Schema
model OpeningHour {
  id    Int    @id @default(autoincrement())
  day   String @unique // e.g., "Sun", "Mon", etc.
  open  String // Time in HH:mm format or "Closed"
  close String // Time in HH:mm format or "Closed"
}

/**
 * CONTACT, CATERING, AND RESERVATION SCHEMAS
 */

model Contact {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Catering {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  date      DateTime
  time      String
  venue     String
  guests    Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  date      DateTime
  time      String
  guests    Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Blog and News Schema
model BlogNews {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String
  author    String
  date      DateTime
  type      String // "blog" or "news"
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Recommendation Schema
model Recommendation {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  price               Float
  image               String?
  category            String
  specialInstructions String   @default("")
  hasSpiceLevel       Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Delivery Charges

model DeliveryCharges {
  id                      Int      @id @default(1)
  ratePerMile             Float
  ratePerHour             Float
  restaurantFeePercentage Float
  minimumCharge           Float
  freeDeliveryThreshold   Float
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

// =========================================
// Orders Schema
// =========================================

/**
 * The Order model stores a single customer's order.
 * - `orderId` is a human-friendly identifier (e.g., "ORD-20250413-ABC123")
 * - `items` holds the ordered items as JSON data.
 * - `totalAmount` is the computed total for the order.
 * - `status` is managed via an enum for clarity and consistency.
 * - `assignedStaffId` can link to a staff member (if any).
 * - Timestamps record creation and updates.
 * - It also has a one-to-many relation with OrderStatusHistory.
 */
model Order {
  id              String      @id @default(uuid())
  orderId         String // Human-friendly order ID (e.g., "ORD-20250413-ABC123")
  customerId      String? // Optional reference to a customer (could be a foreign key if desired)
  items           Json // The list of items in the order
  totalAmount     Float // Total price for the order
  status          OrderStatus @default(ORDER_RECEIVED) // Current order status, as defined in the enum
  assignedStaffId String? // Optional reference to a staff member assigned to this order
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relation: An order can have many status history records.
  statusHistory OrderStatusHistory[]
}

/**
 * The OrderStatusHistory model logs every status change for an order.
 * Each record includes:
 * - The `status` at that point,
 * - The user (or system) responsible for the change in `changedBy`,
 * - And a timestamp of when the update happened.
 */
model OrderStatusHistory {
  id        String      @id @default(uuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id])
  status    OrderStatus // The order status being logged
  changedBy String // Identifier for the user (admin/staff) who made the update
  timestamp DateTime    @default(now())
}

/**
 * Enum to represent all possible statuses for an order.
 * This enum allows us to manage order states in a predictable way.
 * Future customization can extend or modify these status labels.
 */
enum OrderStatus {
  ORDER_RECEIVED // Order has just been received and logged
  IN_PROGRESS // Order is being prepared
  ORDER_READY // Order is ready for pickup or delivery
  PICKED_UP_BY_DRIVER // Order has been picked up by the assigned driver/staff
  ON_THE_WAY // Order is en route to the customer
  DELIVERED // Order has been delivered to the customer
}
