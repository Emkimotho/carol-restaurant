// File: prisma/schema.prisma
// ───────────────────────────────────────────────────────────────────
// 19th-Hole — master Prisma schema  (updated 25 May 2025)
// • Added DELIVERY to DeliveryType enum
// • Added Payout model and Role/UserRole models
// ───────────────────────────────────────────────────────────────────

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// =====================================================================
// 1. User Authentication, Roles, & Account Status
// =====================================================================

model User {
  id                      Int           @id @default(autoincrement())
  email                   String        @unique @db.VarChar(255)
  password                String        @db.Text
  firstName               String        @db.VarChar(100)
  lastName                String        @db.VarChar(100)
  phone                   String?       @db.VarChar(20)
  streetAddress           String?       @db.VarChar(255)
  aptSuite                String?       @db.VarChar(100)
  city                    String?       @db.VarChar(100)
  state                   String?       @db.VarChar(50)
  zip                     String?       @db.VarChar(20)
  country                 String?       @db.VarChar(50)
  resetToken              String?       @db.VarChar(255)
  resetTokenExpiry        DateTime?
  isVerified              Boolean       @default(false)
  verificationToken       String?       @db.VarChar(255)
  verificationTokenExpiry DateTime?
  status                  AccountStatus @default(ACTIVE)
  roles                   UserRole[]
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  /// all status-change records this user made
  statusChanges OrderStatusHistory[] @relation("UserStatusChanges")

  staffProfile  StaffProfile?
  driverProfile DriverProfile?

  customerOrders   Order[] @relation("CustomerOrders")
  driverDeliveries Order[] @relation("DriverOrders")
  staffOrders      Order[] @relation("StaffOrders")

  collectedCash CashCollection[] @relation("CashCollectedBy")
  settledCash   CashCollection[] @relation("CashSettledBy")

  /// all payouts (driver, staff, server, cashier, admin) for this user
  payouts Payout[]
}

enum RoleName {
  SUPERADMIN
  ADMIN
  STAFF
  DRIVER
  CUSTOMER
  PREP
  SERVER
  CASHIER
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

// =====================================================================
// 2. Roles & Join Table
// =====================================================================

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  @@id([userId, roleId])
}

// =====================================================================
// 3. Staff & Driver Profiles
// =====================================================================

model StaffProfile {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int     @unique
  photoUrl String
  position String?
}

model DriverProfile {
  id            Int    @id @default(autoincrement())
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int    @unique
  photoUrl      String
  licenseNumber String
  carMakeModel  String
}

// =====================================================================
// 4. Dynamic Menu System
// =====================================================================

enum MenuCategoryType {
  MainMenu
  GolfMenu
}

model MenuCategory {
  id        String           @id @default(cuid())
  name      String
  type      MenuCategoryType @default(MainMenu)
  order     Int              @default(0)
  hidden    Boolean          @default(false)
  menuItems MenuItem[]
}

model MenuItem {
  id             String   @id @default(cuid())
  title          String
  description    String?
  price          Float
  image          String?
  hasSpiceLevel  Boolean  @default(false)
  isAlcohol      Boolean  @default(false)
  showInGolfMenu Boolean  @default(false)
  createdAt      DateTime @default(now())

  category   MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  optionGroups MenuItemOptionGroup[]
  cloverItemId String?
  stock        Int                   @default(0)

  /// back-relation for OrderLineItem
  lineItems OrderLineItem[]

  @@index([categoryId])
}

model MenuItemOptionGroup {
  id          String @id @default(cuid())
  title       String
  minRequired Int
  maxAllowed  Int?
  optionType  String

  menuItem   MenuItem           @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId String
  choices    MenuOptionChoice[]
}

model MenuOptionChoice {
  id              String @id @default(cuid())
  label           String
  priceAdjustment Float?

  optionGroup       MenuItemOptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
  optionGroupId     String
  nestedOptionGroup NestedOptionGroup?  @relation("ChoiceToNestedGroup")
}

model NestedOptionGroup {
  id          String @id @default(cuid())
  title       String
  minRequired Int
  maxAllowed  Int?

  parentChoice   MenuOptionChoice     @relation("ChoiceToNestedGroup", fields: [parentChoiceId], references: [id], onDelete: Cascade)
  parentChoiceId String               @unique
  choices        NestedOptionChoice[]
}

model NestedOptionChoice {
  id              String            @id @default(cuid())
  label           String
  priceAdjustment Float?
  nestedGroup     NestedOptionGroup @relation(fields: [nestedGroupId], references: [id], onDelete: Cascade)
  nestedGroupId   String
  cloverItemId    String?
  stock           Int               @default(0)
}

// =====================================================================
// 5. Events & Bookings
// =====================================================================

model Event {
  id               String   @id @default(cuid())
  title            String
  description      String
  location         String
  date             DateTime
  startTime        String   @default("00:00")
  endTime          String   @default("00:00")
  adultPrice       Float
  kidPrice         Float
  kidPriceInfo     String?
  availableTickets Int
  image            String?
  isFree           Boolean
  adultOnly        Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  rsvps    RSVP[]
  bookings Booking[]
  faqs     Faq[]
}

model RSVP {
  id         String   @id @default(cuid())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  name       String
  email      String
  adultCount Int
  kidCount   Int
  createdAt  DateTime @default(now())
}

model Booking {
  id         String   @id @default(cuid())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  name       String
  email      String
  adultCount Int
  kidCount   Int
  totalPrice Float
  createdAt  DateTime @default(now())
}

model Faq {
  id       String @id @default(cuid())
  eventId  String
  event    Event  @relation(fields: [eventId], references: [id])
  question String
  answer   String
}

// =====================================================================
// 6. Careers & Applications
// =====================================================================

model Career {
  id           String        @id @default(cuid())
  title        String
  description  String
  requirements String?
  deadline     DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
}

model Application {
  id            String   @id @default(cuid())
  applicantName String
  email         String   @default("")
  jobTitle      String
  resumeUrl     String
  career        Career?  @relation(fields: [careerId], references: [id])
  careerId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// =====================================================================
// 7. Gallery & Opening Hours
// =====================================================================

model GalleryImage {
  id          Int      @id @default(autoincrement())
  src         String
  alt         String
  title       String
  description String
  createdAt   DateTime @default(now())
}

model OpeningHour {
  id    Int    @id @default(autoincrement())
  day   String @unique
  open  String
  close String
}

// =====================================================================
// 8. Contact, Catering, Reservation
// =====================================================================

model Contact {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Catering {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  date      DateTime
  time      String
  venue     String
  guests    Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  date      DateTime
  time      String
  guests    Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =====================================================================
// 9. Blog / News
// =====================================================================

model BlogNews {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String
  author    String
  date      DateTime
  type      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =====================================================================
// 10. Recommendations
// =====================================================================

model Recommendation {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  price               Float
  image               String?
  category            String
  specialInstructions String   @default("")
  hasSpiceLevel       Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// =====================================================================
// 11. Delivery Charges
// =====================================================================

model DeliveryCharges {
  id                      Int      @id @default(1)
  ratePerMile             Float
  ratePerHour             Float
  restaurantFeePercentage Float
  minimumCharge           Float
  freeDeliveryThreshold   Float
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

// =====================================================================
// 12. Carts (Golf Course)
// =====================================================================

model Cart {
  id        String   @id @default(uuid())
  number    Int      @unique
  createdAt DateTime @default(now())

  orders Order[]
}

// =====================================================================
// 13. Event Locations (Pavilions / Sheds)
// =====================================================================

model EventLocation {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  orders Order[]
}

// =====================================================================
// 14. Cash Collections (On-course cash payments)
// =====================================================================

model CashCollection {
  id          String               @id @default(uuid())
  orderId     String               @unique
  order       Order                @relation("OrderCashCollection", fields: [orderId], references: [id])
  serverId    Int
  server      User                 @relation("CashCollectedBy", fields: [serverId], references: [id])
  amount      Float
  status      CashCollectionStatus @default(PENDING)
  collectedAt DateTime             @default(now())
  settledAt   DateTime?
  settledById Int?
  settledBy   User?                @relation("CashSettledBy", fields: [settledById], references: [id])

  @@index([serverId])
  @@index([settledById])
}

enum CashCollectionStatus {
  PENDING
  SETTLED
}

// =====================================================================
// 15. Orders, Line Items, & Status History
// =====================================================================

model Order {
  id      String @id @default(uuid())
  orderId String @unique

  // Workflow
  schedule      DateTime? // null = ASAP
  orderType     String?
  deliveryType  DeliveryType  @default(PICKUP_AT_CLUBHOUSE)
  paymentMethod PaymentMethod @default(CARD)

  // Golf / delivery details
  cartId          String?
  cart            Cart?          @relation(fields: [cartId], references: [id])
  holeNumber      Int?
  eventLocationId String?
  eventLocation   EventLocation? @relation(fields: [eventLocationId], references: [id])

  // Cash collection
  cashCollection CashCollection? @relation("OrderCashCollection")

  // Relations to Users
  customerId Int?
  customer   User? @relation("CustomerOrders", fields: [customerId], references: [id])
  driverId   Int?
  driver     User? @relation("DriverOrders", fields: [driverId], references: [id])
  staffId    Int?
  staff      User? @relation("StaffOrders", fields: [staffId], references: [id])

  // Financial breakdown
  subtotal              Float @default(0)
  taxAmount             Float @default(0)
  tipAmount             Float @default(0)
  customerDeliveryFee   Float @default(0)
  restaurantDeliveryFee Float @default(0)
  totalDeliveryFee      Float @default(0)
  driverPayout          Float @default(0)
  totalAmount           Float @default(0)

  // Delivery metrics
  deliveryDistanceMiles Float @default(0)
  deliveryTimeMinutes   Int   @default(0)

  // Guest + payload
  guestName            String?
  guestEmail           String?
  guestPhone           String?
  items                Json
  deliveryAddress      Json?
  deliveryInstructions String?

  // Alcohol tracking
  containsAlcohol Boolean @default(false)
  ageVerified     Boolean @default(false)

  deliveredAt DateTime?
  status      OrderStatus @default(PENDING_PAYMENT)

  /// all payout records linked to this order
  payouts Payout[]

  lineItems     OrderLineItem[]
  statusHistory OrderStatusHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([driverId])
  @@index([customerId])
  @@index([staffId])
  @@index([cartId])
  @@index([eventLocationId])
}

model OrderLineItem {
  id      String @id @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String

  quantity        Int
  unitPrice       Float
  spiceLevel      String?
  specialNotes    String?
  selectedOptions Json?

  @@index([orderId])
  @@index([menuItemId])
}

model OrderStatusHistory {
  id      String      @id @default(uuid())
  order   Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
  status  OrderStatus

  /// which user performed this change
  user   User? @relation("UserStatusChanges", fields: [userId], references: [id], onDelete: SetNull)
  userId Int?

  changedBy String?
  timestamp DateTime @default(now())

  @@index([userId])
}

enum OrderStatus {
  PENDING_PAYMENT
  ORDER_RECEIVED
  IN_PROGRESS
  ORDER_READY
  PICKED_UP_BY_DRIVER
  ON_THE_WAY
  DELIVERED
  CANCELLED
}

// ───────────────────────────────────────────────────────────────────
// DeliveryType enum — DELIVERY added 24 May 2025
// ───────────────────────────────────────────────────────────────────

enum DeliveryType {
  PICKUP_AT_CLUBHOUSE
  ON_COURSE
  EVENT_PAVILION
  DELIVERY
}

enum PaymentMethod {
  CARD
  CASH
}

// =====================================================================
// 16. Payouts (added 25 May 2025)
// =====================================================================

model Payout {
  id Int @id @default(autoincrement())

  /// who gets paid (driver, staff, server, cashier, admin)
  user   User @relation(fields: [userId], references: [id])
  userId Int

  /// optional link back to its originating Order
  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? // matches Order.id (UUID)

  /// how much (tip share, delivery fee, etc.)
  amount Decimal @db.Decimal(10, 2)

  /// differentiate recipient roles
  category PayoutCategory

  /// mark complete
  paid   Boolean   @default(false)
  paidAt DateTime? // when admin clicked “Mark as Paid”

  /// audit timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([orderId])
}

enum PayoutCategory {
  DRIVER_PAYOUT
  STAFF_TIP
  SERVER_TIP
  CASHIER_TIP
  ADMIN_TIP
  OTHER
}
