generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                      Int                  @id @default(autoincrement())
  email                   String               @unique @db.VarChar(255)
  password                String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  aptSuite                String?              @db.VarChar(100)
  city                    String?              @db.VarChar(100)
  country                 String?              @db.VarChar(50)
  firstName               String               @db.VarChar(100)
  lastName                String               @db.VarChar(100)
  phone                   String?              @db.VarChar(20)
  state                   String?              @db.VarChar(50)
  streetAddress           String?              @db.VarChar(255)
  zip                     String?              @db.VarChar(20)
  isVerified              Boolean              @default(false)
  resetToken              String?              @db.VarChar(255)
  resetTokenExpiry        DateTime?
  verificationToken       String?              @db.VarChar(255)
  verificationTokenExpiry DateTime?
  status                  AccountStatus        @default(ACTIVE)
  collectedCash           CashCollection[]     @relation("CashCollectedBy")
  settledCash             CashCollection[]     @relation("CashSettledBy")
  driverProfile           DriverProfile?
  customerOrders          Order[]              @relation("CustomerOrders")
  driverDeliveries        Order[]              @relation("DriverOrders")
  staffOrders             Order[]              @relation("StaffOrders")
  statusChanges           OrderStatusHistory[] @relation("UserStatusChanges")
  payouts                 Payout[]
  staffProfile            StaffProfile?
  roles                   UserRole[]
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model StaffProfile {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  photoUrl String
  position String?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DriverProfile {
  id            Int    @id @default(autoincrement())
  userId        Int    @unique
  photoUrl      String
  licenseNumber String
  carMakeModel  String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MenuCategory {
  id        String           @id @default(cuid())
  name      String
  order     Int              @default(0)
  hidden    Boolean          @default(false)
  type      MenuCategoryType @default(MainMenu)
  menuItems MenuItem[]
}

model MenuItem {
  id             String                @id @default(cuid())
  title          String
  description    String?
  price          Float
  image          String?
  hasSpiceLevel  Boolean               @default(false)
  showInGolfMenu Boolean               @default(false)
  categoryId     String
  createdAt      DateTime              @default(now())
  cloverItemId   String?
  stock          Int                   @default(0)
  isAlcohol      Boolean               @default(false)
  category       MenuCategory          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  optionGroups   MenuItemOptionGroup[]
  lineItems      OrderLineItem[]

  @@index([categoryId])
}

model MenuItemOptionGroup {
  id            String             @id @default(cuid())
  title         String
  minRequired   Int
  maxAllowed    Int?
  optionType    String
  cloverGroupId String?            // added for Clover modifier-group mapping
  menuItemId    String
  menuItem      MenuItem           @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  choices       MenuOptionChoice[]
}

model MenuOptionChoice {
  id                String              @id @default(cuid())
  label             String
  priceAdjustment   Float?
  cloverModifierId  String?             // added for Clover modifier mapping
  optionGroupId     String
  optionGroup       MenuItemOptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
  nestedOptionGroup NestedOptionGroup?  @relation("ChoiceToNestedGroup")
}

model NestedOptionGroup {
  id             String               @id @default(cuid())
  title          String
  minRequired    Int
  maxAllowed     Int?
  cloverGroupId  String?              // added for Clover nested group mapping
  parentChoiceId String               @unique
  choices        NestedOptionChoice[]
  parentChoice   MenuOptionChoice     @relation("ChoiceToNestedGroup", fields: [parentChoiceId], references: [id], onDelete: Cascade)
}

model NestedOptionChoice {
  id               String            @id @default(cuid())
  label            String
  nestedGroupId    String
  priceAdjustment  Float?
  cloverModifierId String?           // added for Clover nested modifier mapping
  cloverItemId     String?
  stock            Int               @default(0)
  nestedGroup      NestedOptionGroup @relation(fields: [nestedGroupId], references: [id], onDelete: Cascade)
}

model Event {
  id               String    @id @default(cuid())
  title            String
  description      String
  image            String?
  location         String
  date             DateTime
  adultPrice       Float
  kidPrice         Float
  availableTickets Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  adultOnly        Boolean
  isFree           Boolean
  endTime          String    @default("00:00")
  kidPriceInfo     String?
  startTime        String    @default("00:00")
  bookings         Booking[]
  faqs             Faq[]
  rsvps            RSVP[]
}

model RSVP {
  id         String   @id @default(cuid())
  eventId    String
  name       String
  email      String
  adultCount Int
  kidCount   Int
  createdAt  DateTime @default(now())
  event      Event    @relation(fields: [eventId], references: [id])
}

model Booking {
  id         String   @id @default(cuid())
  eventId    String
  name       String
  email      String
  adultCount Int
  kidCount   Int
  totalPrice Float
  createdAt  DateTime @default(now())
  event      Event    @relation(fields: [eventId], references: [id])
}

model Faq {
  id       String @id @default(cuid())
  eventId  String
  question String
  answer   String
  event    Event  @relation(fields: [eventId], references: [id])
}

model Career {
  id           String        @id @default(cuid())
  title        String
  description  String
  requirements String?
  deadline     DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
}

model Application {
  id            String   @id @default(cuid())
  applicantName String
  jobTitle      String
  resumeUrl     String
  careerId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String   @default("")
  career        Career?  @relation(fields: [careerId], references: [id])
}

model GalleryImage {
  id          Int      @id @default(autoincrement())
  src         String
  alt         String
  title       String
  description String
  createdAt   DateTime @default(now())
}

model OpeningHour {
  id    Int    @id @default(autoincrement())
  day   String @unique
  open  String
  close String
}

model Contact {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Catering {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  date      DateTime
  time      String
  venue     String
  guests    Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  date      DateTime
  time      String
  guests    Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogNews {
  id        String   @id @default(cuid())
  title     String
  excerpt   String
  content   String
  author    String
  date      DateTime
  type      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug      String   @unique
}

model Recommendation {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  price               Float
  image               String?
  category            String
  specialInstructions String   @default("")
  hasSpiceLevel       Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model DeliveryCharges {
  id                      Int      @id @default(1)
  ratePerMile             Float
  ratePerHour             Float
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now())
  freeDeliveryThreshold   Float
  minimumCharge           Float
  restaurantFeePercentage Float
}

model Cart {
  id        String   @id @default(uuid())
  number    Int      @unique
  createdAt DateTime @default(now())
  orders    Order[]
}

model EventLocation {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  orders      Order[]
}

model CashCollection {
  id          String               @id @default(uuid())
  orderId     String               @unique
  serverId    Int
  amount      Float
  status      CashCollectionStatus @default(PENDING)
  collectedAt DateTime             @default(now())
  settledAt   DateTime?
  settledById Int?
  order       Order                @relation("OrderCashCollection", fields: [orderId], references: [id])
  server      User                 @relation("CashCollectedBy", fields: [serverId], references: [id])
  settledBy   User?                @relation("CashSettledBy", fields: [settledById], references: [id])

  @@index([serverId])
  @@index([settledById])
}

model Order {
  id                    String               @id @default(uuid())
  orderId               String               @unique
  items                 Json
  totalAmount           Float                @default(0)
  status                OrderStatus          @default(PENDING_PAYMENT)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  driverId              Int?
  guestEmail            String?
  guestName             String?
  guestPhone            String?
  orderType             String?
  deliveryAddress       Json?
  schedule              DateTime?
  customerId            Int?
  customerDeliveryFee   Float                @default(0)
  driverPayout          Float                @default(0)
  restaurantDeliveryFee Float                @default(0)
  subtotal              Float                @default(0)
  taxAmount             Float                @default(0)
  tipAmount             Float                @default(0)
  totalDeliveryFee      Float                @default(0)
  deliveryDistanceMiles Float                @default(0)
  deliveryTimeMinutes   Int                  @default(0)
  deliveredAt           DateTime?
  deliveryInstructions  String?
  staffId               Int?
  cartId                String?
  deliveryType          DeliveryType         @default(PICKUP_AT_CLUBHOUSE)
  eventLocationId       String?
  holeNumber            Int?
  paymentMethod         PaymentMethod        @default(CARD)
  ageVerified           Boolean              @default(false)
  containsAlcohol       Boolean              @default(false)
  cashCollection        CashCollection?      @relation("OrderCashCollection")
  cart                  Cart?                @relation(fields: [cartId], references: [id])
  customer              User?                @relation("CustomerOrders", fields: [customerId], references: [id])
  driver                User?                @relation("DriverOrders", fields: [driverId], references: [id])
  eventLocation         EventLocation?       @relation(fields: [eventLocationId], references: [id])
  staff                 User?                @relation("StaffOrders", fields: [staffId], references: [id])
  lineItems             OrderLineItem[]
  statusHistory         OrderStatusHistory[]
  payouts               Payout[]

  @@index([driverId])
  @@index([customerId])
  @@index([staffId])
  @@index([cartId])
  @@index([eventLocationId])
}

model OrderLineItem {
  id              String   @id @default(uuid())
  orderId         String
  menuItemId      String
  quantity        Int
  unitPrice       Float
  spiceLevel      String?
  specialNotes    String?
  selectedOptions Json?
  menuItem        MenuItem @relation(fields: [menuItemId], references: [id])
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([menuItemId])
}

model OrderStatusHistory {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  changedBy String?
  timestamp DateTime    @default(now())
  userId    Int?
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User?       @relation("UserStatusChanges", fields: [userId], references: [id])

  @@index([userId])
}

model Payout {
  id        Int            @id @default(autoincrement())
  userId    Int
  orderId   String?
  /// how much (tip share, delivery fee, etc.)
  amount    Decimal        @db.Decimal(10, 2)
  /// differentiate recipient roles
  category  PayoutCategory
  /// mark complete
  paid      Boolean        @default(false)
  paidAt    DateTime?
  /// audit timestamps
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  order     Order?         @relation(fields: [orderId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orderId])
}

enum RoleName {
  SUPERADMIN
  ADMIN
  STAFF
  DRIVER
  CUSTOMER
  PREP
  SERVER
  CASHIER
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

enum MenuCategoryType {
  MainMenu
  GolfMenu
}

enum CashCollectionStatus {
  PENDING
  SETTLED
}

enum OrderStatus {
  ORDER_RECEIVED
  IN_PROGRESS
  ORDER_READY
  PICKED_UP_BY_DRIVER
  ON_THE_WAY
  DELIVERED
  CANCELLED
  PENDING_PAYMENT
}

enum DeliveryType {
  PICKUP_AT_CLUBHOUSE
  ON_COURSE
  EVENT_PAVILION
  DELIVERY
}

enum PaymentMethod {
  CARD
  CASH
}

enum PayoutCategory {
  DRIVER_PAYOUT
  STAFF_TIP
  SERVER_TIP
  CASHIER_TIP
  ADMIN_TIP
  OTHER
}
