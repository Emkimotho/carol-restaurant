datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/*
  Existing Models for User Authentication & Roles
*/
model User {
  id                      Int          @id @default(autoincrement())
  email                   String       @unique @db.VarChar(255)
  password                String       @db.Text
  firstName               String       @db.VarChar(100)
  lastName                String       @db.VarChar(100)
  phone                   String?      @db.VarChar(20)
  streetAddress           String?      @db.VarChar(255)
  aptSuite                String?      @db.VarChar(100)
  city                    String?      @db.VarChar(100)
  state                   String?      @db.VarChar(50)
  zip                     String?      @db.VarChar(20)
  country                 String?      @db.VarChar(50)
  resetToken              String?      @db.VarChar(255)
  resetTokenExpiry        DateTime?
  isVerified              Boolean      @default(false)
  verificationToken       String?      @db.VarChar(255)
  verificationTokenExpiry DateTime?
  roles                   UserRole[]
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
}

model Role {
  id    Int       @id @default(autoincrement())
  name  RoleName  @unique
  users UserRole[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

enum RoleName {
  SUPERADMIN
  ADMIN
  STAFF
  DRIVER
  CUSTOMER
}

/*
  Models for the Dynamic Menu System
*/

/**
 * MenuCategory represents main sections or subcategories
 * (e.g., "Breakfast", "Lunch", "Desserts").
 * 'type' can be "MainMenu" or "GolfMenu" as needed.
 */
model MenuCategory {
  id         String     @id @default(cuid())
  name       String
  type       String     // e.g. "MainMenu" or "GolfMenu"
  order      Int        @default(0)
  menuItems  MenuItem[]
}

/**
 * MenuItem represents a single menu entry (e.g., "Spicy Chicken Curry").
 * 'optionGroups' allows further customization (e.g., "Choose Protein").
 */
model MenuItem {
  id             String                 @id @default(cuid())
  title          String
  description    String?
  price          Float
  image          String?
  hasSpiceLevel  Boolean                @default(false)
  showInGolfMenu Boolean                @default(false)

  // Relationship to category
  category        MenuCategory          @relation(fields: [categoryId], references: [id])
  categoryId      String

  // Nested relationships for customization
  optionGroups    MenuItemOptionGroup[]
}

/**
 * MenuItemOptionGroup captures a group of options for a MenuItem.
 * e.g. "Choose Protein", "Choose Starch Side".
 */
model MenuItemOptionGroup {
  id          String             @id @default(cuid())
  title       String
  minRequired Int
  maxAllowed  Int?
  optionType  String             // e.g. "single-select", "multi-select", "dropdown"

  // Relationship to the parent MenuItem
  menuItem    MenuItem           @relation(fields: [menuItemId], references: [id])
  menuItemId  String

  // Each group can have multiple choices
  choices     MenuOptionChoice[]
}

/**
 * A single choice within an option group.
 * e.g. "Beef", "Chicken", "Fries" -> can have a nested option group.
 */
model MenuOptionChoice {
  id                String               @id @default(cuid())
  label             String               // e.g., "Beef", "Chicken"
  priceAdjustment   Float?
  
  // Relationship to the parent option group
  optionGroup       MenuItemOptionGroup  @relation(fields: [optionGroupId], references: [id])
  optionGroupId     String

  // If the choice needs further customization, it can have a NestedOptionGroup
  nestedOptionGroup NestedOptionGroup?
}

/**
 * NestedOptionGroup represents further choices under a single option choice.
 * e.g., if "Fries" is chosen, there's a nested group "Choose Sauce" with "Ketchup" or "Mayo".
 */
model NestedOptionGroup {
  id             String               @id @default(cuid())
  title          String
  minRequired    Int
  maxAllowed     Int?

  // Relationship to the parent MenuOptionChoice
  parentChoice   MenuOptionChoice     @relation(fields: [parentChoiceId], references: [id])
  parentChoiceId String               @unique

  // Nested choices under this group
  choices        NestedOptionChoice[]
}

/**
 * A single nested choice within a NestedOptionGroup.
 * e.g., "Ketchup", "Mayo", possibly with a priceAdjustment if desired.
 */
model NestedOptionChoice {
  id            String              @id @default(cuid())
  label         String
  // Optional field if you want nested price adjustments:
  priceAdjustment Float?

  // Relationship to parent NestedOptionGroup
  nestedGroup   NestedOptionGroup   @relation(fields: [nestedGroupId], references: [id])
  nestedGroupId String
}
