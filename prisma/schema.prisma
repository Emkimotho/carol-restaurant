// ───────────────────────────────────────────────────────────────────────────────
// 0.  Generator & Data‑source configuration
// ───────────────────────────────────────────────────────────────────────────────
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}
/* ============================================================================ */
/* 1.  Users, Authentication & Roles                                            */
/* ============================================================================ */

enum RoleName {
  SUPERADMIN
  ADMIN
  STAFF
  DRIVER
  CUSTOMER
  PREP
  SERVER
  CASHIER
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

model User {
  id                        Int             @id @default(autoincrement())
  email                     String          @unique @db.VarChar(255)
  password                  String
  firstName                 String          @db.VarChar(100)
  lastName                  String          @db.VarChar(100)
  phone                     String?         @db.VarChar(20)
  streetAddress             String?         @db.VarChar(255)
  aptSuite                  String?         @db.VarChar(100)
  city                      String?         @db.VarChar(100)
  state                     String?         @db.VarChar(50)
  zip                       String?         @db.VarChar(20)
  country                   String?         @db.VarChar(50)
  isVerified                Boolean         @default(false)
  resetToken                String?         @db.VarChar(255)
  resetTokenExpiry          DateTime?
  verificationToken         String?         @db.VarChar(255)
  verificationTokenExpiry   DateTime?
  status                    AccountStatus   @default(ACTIVE)

  /// Cloudinary photo for any user
  photoPublicId  String?   @unique
  photoUrl       String?   // secure_url

  isOnline                  Boolean         @default(false)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  /// Clover sync: stores the Clover employee ID for mapping webhook actors
  cloverEmployeeId          String?         @unique

  /* relations */
  roles            UserRole[]     
  staffProfile     StaffProfile?  
  driverProfile    DriverProfile? 
  collectedCash    CashCollection[]     @relation("CashCollectedBy")
  settledCash      CashCollection[]     @relation("CashSettledBy")
  customerOrders   Order[]              @relation("CustomerOrders")
  driverDeliveries Order[]              @relation("DriverOrders")
  staffOrders      Order[]              @relation("StaffOrders")
  statusChanges    OrderStatusHistory[] @relation("UserStatusChanges")
  payouts          Payout[]            

  // Tickets this user has redeemed
  redeemedTickets  Ticket[]            @relation("RedeemedBy")

  @@index([isOnline])
}

model Role {
  id    Int      @id @default(autoincrement())
  name  RoleName @unique
  users UserRole[]
}

model UserRole {
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model StaffProfile {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  photoPublicId  String? @unique      // Cloudinary public ID
  photoUrl       String?             // secure_url from Cloudinary or legacy URL
  position       String?

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model DriverProfile {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  photoPublicId  String? @unique      // Cloudinary public ID
  photoUrl       String?             // secure_url from Cloudinary or legacy URL
  licenseNumber  String
  carMakeModel   String

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/* ============================================================================ */
/* 2.  Menu & Inventory                                                         */
/* ============================================================================ */

enum MenuCategoryType {
  MainMenu
  GolfMenu
}

/* --------------------------------------------------------------------------- */
/*  MenuCategory                                                               */
/* --------------------------------------------------------------------------- */
model MenuCategory {
  id               String   @id @default(cuid())
  name             String
  order            Int      @default(0)
  hidden           Boolean  @default(false)
  type             MenuCategoryType @default(MainMenu)

  /* relations */
  menuItems        MenuItem[]
  cloverCategoryId String?  @unique

  @@index([type])
}

/* --------------------------------------------------------------------------- */
/*  MenuItem   – with popularityScore, isActive, updatedAt (now fixed)         */
/* --------------------------------------------------------------------------- */
model MenuItem {
  id             String   @id @default(cuid())
  title          String
  description    String?
  price          Float
  image          String?
  cloudinaryPublicId String?   // for SDK‐driven transforms
  imageUrl           String?   // store the raw secure_url
  hasSpiceLevel  Boolean  @default(false)
  showInGolfMenu Boolean  @default(false)
  isAlcohol      Boolean  @default(false)

  /* Recommendation / lifecycle metadata */
  popularityScore Int      @default(0)
  isActive        Boolean  @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt   // ← default added ✅

  /* relations */
  categoryId   String
  category     MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  optionGroups MenuItemOptionGroup[]
  cloverItemId String? @unique
  stock        Int     @default(0)

  lineItems    OrderLineItem[]

  @@index([categoryId])
}

/* --------------------------------------------------------------------------- */
/*  MenuItemOptionGroup                                                        */
/* --------------------------------------------------------------------------- */
model MenuItemOptionGroup {
  id            String @id @default(cuid())
  title         String
  minRequired   Int
  maxAllowed    Int?
  optionType    String
  cloverGroupId String?

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  choices    MenuOptionChoice[]
}

/* --------------------------------------------------------------------------- */
/*  MenuOptionChoice & nested option models                                    */
/* --------------------------------------------------------------------------- */
model MenuOptionChoice {
  id               String @id @default(cuid())
  label            String
  priceAdjustment  Float?
  cloverModifierId String?

  optionGroupId String
  optionGroup   MenuItemOptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)

  nestedOptionGroup NestedOptionGroup? @relation("ChoiceToNestedGroup")
}

model NestedOptionGroup {
  id            String @id @default(cuid())
  title         String
  minRequired   Int
  maxAllowed    Int?
  cloverGroupId String?

  parentChoiceId String @unique
  parentChoice   MenuOptionChoice @relation("ChoiceToNestedGroup", fields: [parentChoiceId], references: [id], onDelete: Cascade)

  choices        NestedOptionChoice[]
}

model NestedOptionChoice {
  id               String @id @default(cuid())
  label            String
  priceAdjustment  Float?
  cloverModifierId String?
  cloverItemId     String?
  stock            Int    @default(0)

  nestedGroupId String
  nestedGroup   NestedOptionGroup @relation(fields: [nestedGroupId], references: [id], onDelete: Cascade)
}


/* ============================================================================ */
/* 3.  Cart & Orders                                                            */
/* ============================================================================ */

enum DeliveryType {
  PICKUP_AT_CLUBHOUSE
  ON_COURSE
  EVENT_PAVILION
  DELIVERY
}

enum PaymentMethod {
  CARD
  CASH
}

enum OrderStatus {
  ORDER_RECEIVED
  IN_PROGRESS
  ORDER_READY
  PICKED_UP_BY_DRIVER
  ON_THE_WAY
  DELIVERED
  CANCELLED
  PENDING_PAYMENT
}

model Cart {
  id        String   @id @default(uuid())
  number    Int      @unique
  createdAt DateTime @default(now())

  orders    Order[]
}

model Order {
  /* keys & timestamps */
  id              String    @id @default(uuid())
  orderId         String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  /* Clover sync fields */
  cloverOrderId    String?   @unique
  cloverLastSyncAt DateTime?
  checkoutSessionId    String?   @unique    // ← NEW for Hosted-Checkout webhooks

  /* raw payload */
  items           Json

  /* financials */
  subtotal                Float   @default(0)
  taxAmount               Float   @default(0)
  tipAmount               Float   @default(0)
  customerDeliveryFee     Float   @default(0)
  restaurantDeliveryFee   Float   @default(0)
  totalDeliveryFee        Float   @default(0)
  driverPayout            Float   @default(0)
  freeDelivery            Boolean @default(false)
  additionalAmountForFree Float   @default(0)
  discountSaved           Float?
  totalAmount             Float   @default(0)

  /* free-form extras (added) */
  metadata        Json?      // new column

  /* guest info */
  guestEmail      String?
  guestName       String?
  guestPhone      String?

  /* scheduling & type */
  schedule        DateTime?
  orderType       String?    @default("")
  deliveryType    DeliveryType @default(PICKUP_AT_CLUBHOUSE)

  /* delivery metrics */
  deliveryAddress       Json?
  deliveryInstructions  String?
  deliveryDistanceMiles Float    @default(0)
  deliveryTimeMinutes   Int      @default(0)
  deliveredAt           DateTime?

  /* golf / event */
  eventLocationId String?
  eventLocation   EventLocation? @relation(fields: [eventLocationId], references: [id])
  holeNumber      Int?

  /* payment & compliance */
  paymentMethod   PaymentMethod @default(CARD)
  containsAlcohol Boolean       @default(false)
  ageVerified     Boolean       @default(false)

  /* relations */
  driverId   Int?
  driver     User? @relation("DriverOrders", fields: [driverId], references: [id])

  staffId    Int?
  staff      User? @relation("StaffOrders", fields: [staffId], references: [id])

  customerId Int?
  customer   User? @relation("CustomerOrders", fields: [customerId], references: [id])

  cartId     String?
  cart       Cart? @relation(fields: [cartId], references: [id])

  cashCollection CashCollection? @relation("OrderCashCollection")

  lineItems     OrderLineItem[]
  statusHistory OrderStatusHistory[]
  payouts       Payout[]

  status        OrderStatus @default(PENDING_PAYMENT)

  @@index([driverId])
  @@index([staffId])
  @@index([customerId])
  @@index([cartId])
  @@index([eventLocationId])
}

model OrderLineItem {
  id              String   @id @default(uuid())
  orderId         String
  menuItemId      String
  quantity        Int
  unitPrice       Float
  spiceLevel      String?
  specialNotes    String?
  selectedOptions Json?

  /* Clover sync field */
  cloverLineItemId String?

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@index([orderId])
  @@index([menuItemId])
}

model OrderStatusHistory {
  id        String   @id @default(uuid())
  orderId   String
  status    OrderStatus
  changedBy String?
  timestamp DateTime @default(now())

  userId Int?
  user   User?  @relation("UserStatusChanges", fields: [userId], references: [id], onDelete: SetNull)
  order  Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EventLocation {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  orders Order[]
}

/* ============================================================================ */
/* 4.  Cash‑collection & Payout                                                 */
/* ============================================================================ */

enum CashCollectionStatus {
  PENDING
  SETTLED
}

model CashCollection {
  id          String               @id @default(uuid())
  orderId     String               @unique
  serverId    Int
  amount      Float
  status      CashCollectionStatus @default(PENDING)
  collectedAt DateTime @default(now())
  settledAt   DateTime?
  settledById Int?

  order      Order @relation("OrderCashCollection", fields: [orderId], references: [id])
  server     User  @relation("CashCollectedBy", fields: [serverId], references: [id])
  settledBy  User? @relation("CashSettledBy", fields: [settledById], references: [id])

  @@index([serverId])
  @@index([settledById])
}

enum PayoutCategory {
  DRIVER_PAYOUT
  STAFF_TIP
  SERVER_TIP
  CASHIER_TIP
  ADMIN_TIP
  OTHER
}

model Payout {
  id        Int      @id @default(autoincrement())
  userId    Int
  orderId   String?
  amount    Decimal  @db.Decimal(10, 2)
  category  PayoutCategory
  paid      Boolean  @default(false)
  paidAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@index([userId])
  @@index([orderId])
}

/* ============================================================================ */
/* 5.  Events, Bookings, FAQs, Careers, Applications                            */
/* ============================================================================ */

model Event {
  id                    String     @id @default(cuid())
  title                 String
  description           String
  // Cloudinary integration
  cloudinaryPublicId    String?    @unique
  imageUrl              String?    // secure_url returned by Cloudinary (fallback or immediate use)
  // legacy / direct‐upload fallback
  image                 String?    // e.g. `/images/foo.jpg`
  location              String
  date                  DateTime
  startTime             String     @default("00:00")
  endTime               String     @default("00:00")
  adultPrice            Float
  kidPrice              Float
  kidPriceInfo          String?
  availableTickets      Int
  isFree                Boolean
  adultOnly             Boolean
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  bookings              Booking[]
  faqs                  Faq[]
  rsvps                 RSVP[]
  // Back-relation for all tickets (paid or free)
  tickets               Ticket[]
}

model RSVP {
  id         String   @id @default(cuid())
  eventId    String
  name       String
  email      String
  adultCount Int
  kidCount   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  // Relation to Event: cascade delete RSVPs if the Event is removed
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Back-relation: tickets issued for this RSVP (if any)
  tickets    Ticket[]

  /// Indexes for faster lookups by event or email
  @@index([eventId])
  @@index([email])
}

enum BookingStatus {
  PENDING_PAYMENT
  CONFIRMED
  CANCELLED
}

model Booking {
  id           String        @id @default(cuid())
  eventId      String
  name         String
  email        String
  adultCount   Int
  kidCount     Int
  totalPrice   Float
  status       BookingStatus @default(PENDING_PAYMENT)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt

  // Relation to Event: cascade delete Bookings if the Event is removed
  event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Back-relation for tickets issued after payment
  tickets      Ticket[]

  /// Indexes for faster lookups by event or email
  @@index([eventId])
  @@index([email])
}

model Faq {
  id       String @id @default(cuid())
  eventId  String
  question String
  answer   String

  event    Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Career {
  id           String        @id @default(cuid())
  title        String
  description  String
  requirements String?
  deadline     DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt

  applications Application[]
}

model Application {
  id            String    @id @default(cuid())
  applicantName String
  email         String    @default("")
  jobTitle      String
  resumeUrl     String
  resumePublicId String?   // Cloudinary public_id for any file type
  careerId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  career        Career?   @relation(fields: [careerId], references: [id], onDelete: Cascade)
}

/* ============================================================================ */
/* 5b. Tickets                                                                   */
/* ============================================================================ */

// Strict enums for ticket type and status
enum TicketType {
  ADULT
  KID
}

enum TicketStatus {
  ISSUED
  REDEEMED
  CANCELLED
}

model Ticket {
  id             String       @id @default(cuid())

  // Optional link back to a paid Booking
  booking        Booking?     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String?

  // Optional link back to a free-event RSVP
  rsvp           RSVP?        @relation(fields: [rsvpId], references: [id], onDelete: Cascade)
  rsvpId         String?

  // Denormalized link to the Event
  event          Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId        String

  // Purchaser info (from Booking or RSVP)
  purchaser      String
  purchaserEmail String

  // Ticket category: adult or kid
  ticketType     TicketType   @default(ADULT)

  // Unique code for check-in
  code           String       @unique

  // Lifecycle tracking: issued → redeemed → cancelled
  status         TicketStatus @default(ISSUED)
  redeemedAt     DateTime?

  // Which staff member redeemed this ticket
  redeemedById   Int?
  redeemedBy     User?        @relation("RedeemedBy", fields: [redeemedById], references: [id])

  createdAt      DateTime     @default(now())
}

/* ============================================================================ */
/* 6.  Gallery, Site‑wide tables, Marketing, etc.                               */
/* ============================================================================ */
model GalleryImage {
  id                 Int      @id @default(autoincrement())
  cloudinaryPublicId String   @unique
  imageUrl           String
  alt                String
  title              String
  description        String
  createdAt          DateTime @default(now())
}

model OpeningHour {
  id    Int    @id @default(autoincrement())
  day   String @unique
  open  String
  close String
}

model Contact {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Catering {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  date      DateTime
  time      String
  venue     String
  guests    Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  date      DateTime
  time      String
  guests    Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogNews {
  id                  String   @id @default(cuid())
  title               String
  slug                String   @unique
  excerpt             String
  content             String
  author              String
  date                DateTime
  type                String

  /// Cloudinary public ID for the blog image
  blogImagePublicId   String?  @unique
  /// Secure URL returned by Cloudinary
  imageUrl            String?
  /// Legacy fallback if you still need local uploads
  legacyImage         String?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Recommendation {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  price               Float
  image               String?
  category            String
  specialInstructions String   @default("")
  hasSpiceLevel       Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model DeliveryCharges {
  id                      Int      @id @default(1)
  ratePerMile             Float
  ratePerHour             Float
  freeDeliveryThreshold   Float
  minimumCharge           Float
  restaurantFeePercentage Float
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model MenuPreviewItem {
  id                 Int       @id @default(autoincrement())
  title              String
  description        String?
  imageUrl           String
  cloudinaryPublicId String?   // ← new, optional
  displayOrder       Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}



model Subscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model SitePolicy {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* ============================================================================ */
/* 7.  Banner / Hero                                                            */
/* ============================================================================ */

enum BannerType {
  IMAGE
  VIDEO
}

model BannerImage {
  id        String   @id @default(uuid())
  type      BannerType @default(IMAGE)
  imageUrl  String?
  videoUrl  String?
  alt       String
  position  Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* ============================================================================ */
/* 8.  System-wide key-value settings                                           */
/* ============================================================================ */

model SystemSetting {
  key   String @id           // e.g. "cloverLocationId"
  value String               // arbitrary value (UUID, JSON, etc.)
}
